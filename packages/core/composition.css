/* Composition */
.center {
  box-sizing: content-box;
  margin-inline: auto;
  max-inline-size: var(--nyc-sys-dimension-page-max-width);
  padding-inline-start: var(--nyc-sys-dimension-gutter);
  padding-inline-end: var(--nyc-sys-dimension-gutter);
}

/* AUTO GRID
Related Every Layout: https://every-layout.dev/layouts/grid/
More info on the flexible nature: https://piccalil.li/tutorial/create-a-responsive-grid-layout-with-no-media-queries-using-css-grid/
A flexible layout that will create an auto-fill grid with
configurable grid item sizes

CUSTOM PROPERTIES AND CONFIGURATION
--gutter (var(--space-s-m)): This defines the space
between each item.

--grid-min-item-size (14rem): How large each item should be
ideally, as a minimum.

--grid-placement (auto-fill): Set either auto-fit or auto-fill
to change how empty grid tracks are handled */
.grid {
  --gutter: var(--nyc-sys-dimension-gutter);
  display: grid;
  gap: var(--gutter, var(--space-s-l));
  grid-auto-rows: 1fr
}

@supports (width: min(250px, 100%)) {
  .grid {
    /* grid-template-columns: repeat(auto-fit, minmax(min(200px, 100%), 1fr)); */
    grid-template-columns: repeat(
      var(--grid-placement, auto-fill),
      minmax(var(--grid-min-item-size, 16rem), var(--grid-max-item-size, 1fr))
    );
  }
}

.grid > * {
  /* container: grid-item / inline-size; */
}

.center {
  container: grid-parent / inline-size;
}

.grid[data-grid-cols="4"] {
  --gutter: var(--space-s);
  --grid-placement: auto-fit;
  /* --grid-min-item-size: calc(( var(--page-max-width) - calc(var( --gutter ) * 3) ) / 4); */
  --grid-min-item-size: 12.5rem;
}

.grid[data-grid-cols="2"] {
  --grid-placement: auto-fit;
  --grid-min-item-size: 20rem;
}

[data-gap=m] {
  --gutter: var(--space-m);
}

/* SIDEBAR */
/* .with-sidebar { */
/*   display: flex; */
/*   flex-wrap: wrap; */
/*   gap: var(--s1); */
/* } */

/* .with-sidebar > :first-child { */
/*   flex-grow: 1; */
/* } */

/* .with-sidebar > :last-child { */
/*   flex-basis: 0; */
/*   flex-grow: 999; */
/*   min-inline-size: 50%; */
/* } */

/**
 * REGION
 * Add consistent vertical padding to create regions of content
 * Can either be configured by setting --region-space or use a default from the space scale
 */
.region {
  padding-block-start: var(--region-space, var(--space-l-xl));
  padding-block-end: var(--region-space, var(--space-l-xl));
}

.region[data-region-space="s"] {
  --region-space: var(--space-s);
}

.region[data-region-space="m"] {
  --region-space: var(--space-m);
}

.region[data-region-space="l"] {
  --region-space: var(--space-l);
}

.region[data-region-space="s-m"] {
  --region-space: var(--space-s-m);
}

/*
FLOW UTILITY
Like the Every Layout stack: https://every-layout.dev/layouts/stack/
Info about this implementation: https://piccalil.li/quick-tip/flow-utility/
 */
.flow > * {
  margin-block: 0;
}

.flow > * + * {
  margin-block-start: var(--space, 1em);
}

[data-flow-space=s] {
  --space: var(--space-s);
}

[data-flow-space=m] {
  --space: var(--space-m);
}

[data-flow-space=l] {
  --space: var(--space-l);
}

/* Switcher */
.switcher {
  display: flex;
  flex-wrap: wrap;
  gap: var(--space-s-m);
  container: switcher / inline-size;
}

.switcher > * {
  flex-grow: 1;
  flex-basis: calc(( 40rem - 100%) * 999);
}

.switcher > :nth-last-child(n+ 4),
.switcher > :nth-last-child(n+ 4) ~ * {
  flex-basis: 100%;
}

[data-col-layout="1-3-2"] {
  & :nth-child(2) {
    order: 3;
  }

  & :nth-child(3) {
    flex-grow: 2;
  }
}

@container switcher (max-width: 40rem) {
  [data-col-layout="1-3-2"] {
    & :nth-child(2) {
      order: initial;
    }
  }
}
